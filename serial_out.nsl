module serial_out {

 reg txd0[8], txd1[8];
 reg baud_count[4]=0, bit_count[4]=0;
 reg txdr=1;

 reg txbusyr=0;

 proc_name tx();
 proc_name tw();

  {
  if(txbusyr) txbusy();
  txd = txdr;
 }

 func baud baud_count := baud_count + 1;

 func port_write  {
   txd0 := data;
   any {
     ~tx: tx();
      tx:  {
                tw();
                txbusyr := 1;
		}
   }
 }

 proc tw {
  any {
   ~tx:  {
             tx();
             txbusyr := 0;
             finish;
           }
  }
 }
 proc tx {
  state_name setup, startbit, txbit, stopbit;
  first_state setup;
  state setup  {
    txd1 := txd0;
    bit_count := 0;
    goto startbit;
    }
  state startbit if(baud&(baud_count==0xf))  {
    txdr := 0;
    goto txbit;
  }
  state txbit if(baud&(baud_count==0xf)) any {
   ~bit_count[3]:  {
        txdr := txd1[0];
        txd1 := {0b0, txd1[7:1]};
        bit_count := bit_count + 1;
    }
    bit_count[3]:  {
       txdr := 0b1;
       goto stopbit;
    }
  }
  state stopbit if(baud&(baud_count==0xf))  {
    goto setup;
    finish;
  }
 }
}

