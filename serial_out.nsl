#include "serial.h"

module serial_out {

 reg txd0[8], txd1[8];
 reg baud_count[3]=0, bit_count[4]=0;
 reg txdr=1;
 
 proc_name tx();
 serial_clkfix baudclk;

{
  if(tx) txbusy();
  txd = txdr;
}
   
 func baudclk.baud{
   baud_count := baud_count + 1;
 }

 func port_write  {
   txd0 := data;
   tx();
 }

 proc tx {
  state_name setup, startbit, txbit, stopbit;
  first_state setup;
  state setup  {
    txd1 := txd0;
    bit_count := 0;
    goto startbit;
  }
  state startbit if(baudclk.baud & (baud_count==3'b111))  {
    txdr := 0;
    goto txbit;
  }
  state txbit if(baudclk.baud & (baud_count==3'b111)) any {
   ~bit_count[3]:  {
        txdr := txd1[0];
        txd1 := {0b0, txd1[7:1]};
        bit_count := bit_count + 1;
    }
    bit_count[3]:  {
       txdr := 0b1;
       goto stopbit;
    }
  }
  state stopbit if(baudclk.baud & (baud_count==3'b111))  {
    goto setup;
    finish;
  }
 }
}

