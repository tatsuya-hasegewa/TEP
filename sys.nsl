#include "serial.h"
#include "tep.h"
#include "ram4k.h"
#include "timer.h"

#ifndef SYNTHE
declare sys {
 input  btn[3], RXD, PS2D, PS2C;
 output TXD, VGA_R, VGA_G, VGA_B, VGA_H, VGA_V;
 output led[8];
 output sseg[8], an[4];
 input  sw[8];
 //input reset;
}
#endif

module sys {

 tep  	cpu;
 alt_ram4k	mainmem;
 serial_in  serrx;
 serial_out sertx;
 timer timer1;

 reg interval[16]=0, run=0;
 reg ledout[8], anr[4], ssegr[8], seg0[8], seg1[8], seg2[8], seg3[8];
 reg intr_src[3] = 3'b111;
 reg intr_pc[16];

 {

   if(~run & (&interval[15:0])) {cpu.start(); run := 0b1; }//if(~run && reset) {cpu.start(); run := 1; }

   serrx.rxd = RXD;
   TXD = sertx.txd;

   VGA_R = 0b0;
   VGA_G = 0b0;
   VGA_B = 0b0;
   VGA_H = 0b1;
   VGA_V = 0b1;

   led = ledout;
   interval := interval + 0x0001;
   any {
     interval[15:14] == 0b00: {anr := 0x1; ssegr := seg0; }
     interval[15:14] == 0b01: {anr := 0x2; ssegr := seg1; }
     interval[15:14] == 0b10: {anr := 0x4; ssegr := seg2; }
     interval[15:14] == 0b11: {anr := 0x8; ssegr := seg3; }
     }
   sseg = ~ssegr; an = ~anr;
   }
 
 func cpu.memory_write any {
	cpu.adrs < 0x8000 :{
		mainmem.memory_write(cpu.adrs,cpu.datao);
		if(cpu.ube) mainmem.ube();
		if(cpu.lbe) mainmem.lbe();
		if(mainmem.memory_ack) cpu.memory_ack();
		}
	cpu.adrs == 0xe000: /* display data */
	        {
		   sertx.port_write(cpu.datao[7:0]);
		   cpu.memory_ack();
		}
	cpu.adrs == 0xe002: /* led data */
	        {
		   ledout := cpu.datao[7:0];
		   cpu.memory_ack();
		}
	cpu.adrs == 0xe008: /* led data */
	        {
		   seg0 := cpu.datao[7:0];
		   cpu.memory_ack();
		}
	cpu.adrs == 0xe009: /* led data */
	        {
		   seg1 := cpu.datao[15:8];
		   cpu.memory_ack();
		}
	cpu.adrs == 0xe00a: /* led data */
	        {
		   seg2 := cpu.datao[7:0];
		   cpu.memory_ack();
		}
	cpu.adrs == 0xe00b: /* led data */
	        {
		   seg3 := cpu.datao[15:8];
		   cpu.memory_ack();
		}
	0xf000 <= cpu.adrs && cpu.adrs <= 0xf007: /*F000 ~ F007 int timer1*/
			{
			timer1.write(cpu.adrs[2:1], cpu.datao);
		   	cpu.memory_ack();
		}
	cpu.adrs == 0xfe02: /* intrrupted pc */
	    {
			intr_pc := cpu.datao;
		   	cpu.memory_ack();
		}
	}
 
 func cpu.memory_read any {
	cpu.adrs == 0xe000: /* keyboard data */
	        {
		   cpu.datai = {0x00, serrx.data};
		   cpu.memory_ack();
		}
	cpu.adrs == 0xe001: {/* keyboard, display status */
		   cpu.datai = {serrx.rxready, sertx.txbusy,
		               0b000000, 0x00};
		   cpu.memory_ack();
		   }
	cpu.adrs == 0xe002: /* sw data */
	        {
		   cpu.datai = {0x00, sw};
		   cpu.memory_ack();
		}
	0xf000 <= cpu.adrs && cpu.adrs <= 0xf007: /*F000 ~ F007 int timer1*/
			{
			cpu.datai = timer1.read(cpu.adrs[2:1]);
		   	cpu.memory_ack();
		}
	cpu.adrs == 0xfe00: /* intr source */
	    {
			cpu.datai = 16'(intr_src);
		   	cpu.memory_ack();
		}
	cpu.adrs == 0xfe02: /* intrrupted pc */
	    {
			cpu.datai = intr_pc;
		   	cpu.memory_ack();
		}
	cpu.adrs < 0x8000: {
		ledout := cpu.adrs[7:0];
		cpu.datai = mainmem.memory_read(cpu.adrs).datao;
		if(cpu.ube) mainmem.ube();
		if(cpu.lbe) mainmem.lbe();
		if(mainmem.memory_ack) cpu.memory_ack();
		}
	}

#define TIMER 3'b000

	func timer1.intr{
		intr_src := TIMER;
		cpu.int_signal();
	}
}