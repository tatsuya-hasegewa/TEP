#include "ram4k.h"

#ifndef SYNTHE
module altera_bram4k {	//bram sim
    func_self read;
    func_self write;
    mem ram[DEPTH][WIDTH];
    wire wdata[WIDTH];
    reg rdata[WIDTH];
    reg byteen[2];

    rdata := ram[address];
    byteen := byteena;
    any{
        byteen == 2'b01:{
            q = {8'b0, rdata[7:0]};
        }
        byteen == 2'b10:{
            q = {rdata[15:8], 8'b0};
        }
        byteen == 2'b11:{
            q = rdata;
        }   
        byteena == 2'b01:{
            wdata = {8'(ram[address] >> 8), data[7:0]};
        }
        byteena == 2'b10:{
            wdata = {data[15:8], 8'(ram[address])};
        }
        byteena == 2'b11:{
            wdata = data;
        }
        wren: ram[address] := wdata;
    }
}
#endif

module alt_ram4k {

	altera_bram4k memory;
	
	reg prev_req[LENGTH] = 1'b1;	//リセットvector以外なら何でもいい
	wire addr[LENGTH];
	wire byteen[2];
	wire wdata[WIDTH];
	func_self read(addr);
	func_self write(addr,byteen,wdata);

	func read{
		prev_req := addr;
		memory.address = addr;
		memory.wren = 0;	//read
		memory.byteena = 2'b11;
	}

	func write{
		memory.address = addr;
		memory.wren = 1;	//write
		memory.byteena = byteen;
		memory.data = wdata;
	}

	/*always*/{
		memory.clock = m_clock;
		datao = memory.q;
	}		

	func memory_write {
		write(LENGTH'(adrs >> ADDR_LSB), {ube,lbe}, datai);
		memory_ack();
	}

	func memory_read {
		read(LENGTH'(adrs >> ADDR_LSB));
		if(prev_req == addr){
			memory_ack();
		}
	}
}
